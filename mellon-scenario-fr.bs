<pre class='metadata'>
Title : Cas d'utilisation de l'orchestrateur Mellon
Shortname: orchestrator
Level: 2
Status: DREAM
Editor: Patrick Hochstenbach, [IDLab - Ghent University](https://knows.idlab.ugent.be), patrick.hochstenbach@ugent.be
Editor: Ruben Dedecker, [IDLab - Ghent University](https://knows.idlab.ugent.be), ruben.dedecker@ugent.be
Markup Shorthands: markdown yes
Abstract: TODO
</pre>

# Cas d'utilisation de l'orchestrateur Mellon

# Glossaire

Copié depuis [Orchestrator for a decentralized Digital Heritage Network](https://erfgoedpod.github.io/orchestrator/) :: 
<dfn export>Acteur</dfn>
:: Une entité (personne, application ou service) qui participe au réseau.
: <dfn export>Agent humain</dfn>
:: Une personne qui agit directement en tant qu'[=Acteur=] sur le réseau.
: <dfn export>Agent autonome</dfn>
:: Une instance logicielle intelligente qui agit au nom d'un [=Acteur=] sans aucune interférence de ce dernier.
: <dfn export>Mainteneur</dfn>
:: Un [=Agent humain=] qui peut effectuer manuellement des actions (voir [[#actions]]) sur le réseau à l'aide d'une application [=Tableau de bord=].
:: Généralement une personne employée par une organisation (par exemple, une institution du patrimoine culturel) pour maintenir les données et ensembles de données possédés par cette organisation.
: <dfn export>Pod de données</dfn>
:: Tel que défini par [[solid-protocol]], un <a href="https://solidproject.org/TR/protocol#data-pod">Pod de données</a> est un endroit pour stocker des documents, avec des mécanismes de contrôle d'accès.
: <dfn>Boîte de réception</dfn>
:: Une ressource [[!LDP]] où d'autres acteurs peuvent POSTER des notifications de données liées [[!LDN]] afin de notifier l'acteur d'un changement dans le cycle de vie d'un artefact.
: <dfn>Journal d'événements du cycle de vie de l'artefact</dfn>
:: Une ressource HTTP servie par un acteur (par exemple, en tant que ressource dans le [=Pod de données=]) qui représente un journal d'événements du cycle de vie auxquels les artefacts connus de l'acteur ont participé.
:: Les artefacts sont considérés comme connus lorsqu'ils résident dans le [=Pod de données=] de l'acteur ou si l'acteur en a pris connaissance via [[!LDN]].
: <dfn export>Concentrateur de services</dfn>
:: Un [=Acteur=] qui fournit un service à d'autres acteurs dans le réseau. Il s'agit d'une <a href="https://solidproject.org/TR/protocol#solid-app">application Solid</a> et sert une [=Boîte de réception=].
: <dfn export>Politique</dfn>
:: Un ensemble de règles métier lisibles par machine qui indiquent à l'[=Orchestrator=] quelles actions entreprendre en réponse à un déclencheur tel que des notifications entrantes, des changements perçus dans les données, ou une invocation manuelle par un [=Acteur=].
: <dfn export>Tableau de bord</dfn>Une application utilisateur et une <a href="https://solidproject.org/TR/protocol#solid-app">application Solid</a> qui permet aux utilisateurs d'interagir avec le contenu du [=Data Pod=], de l'[=Orchestrator=] ou d'autres [=Acteurs=] dans le réseau du patrimoine numérique.

Nouvelle terminologie ajoutée :

: <dfn export>Artefact</dfn>
:: Une ressource HTTP sur un [=Data Pod=] qui est l'objet de la Communication (Scholaire) (par exemple une publication, une critique, une nanopublication, un ensemble de données)
: <dfn export>Orchestrator</dfn>
:: Un Orchestrator est un [=Agent Autonome=] dédié à un [=Acteur=] qui héberge un [=Data Pod=] avec une [=Boîte de Réception=] et un [=Artefact Lifecycle Event Log=] associés. Il interprète et exécute les règles métier décrites dans une [=Politique=]. L'Orchestrator surveille la [=Boîte de Réception=] pour d'éventuels déclencheurs, enregistre les actions qu'il entreprend dans le [=Artefact Lifecycle Event Log=] et communique avec d'autres Acteurs.
: <dfn export>App</dfn>
:: Une App est un [=Agent Autonome=] dédié à un [=Acteur=] qui héberge un [=Data Pod=]. L'App peut écrire dans le [=Data Pod=] sans surveillance de l'=Agent Humain=] et n'est pas limitée à la [=Boîte de Réception=] ou au [=Artefact Lifecycle Event Log=].

Problème : Besoin d'un meilleur nom pour l'App

# Différence entre le Tableau de Bord, l'App et l'Orchestrator

Dans la discussion suivante, trois agents communiquent avec le **Data Pod** avec des privilèges différents : l'**Orchestrator**, le **Tableau de Bord** et l'**App**. Bien que dans des applications réelles, ces agents puissent se chevaucher ou ne pas être nécessaires du tout (dans certains cas), dans ce document, ils sont traités comme des entités distinctes pour faciliter la discussion. Quelques raisons pour lesquelles ces Acteurs pourraient être considérés comme des entités distinctes :

- privilèges nécessaires pour accéder au **Data Pod**
- exigences nécessaires pour recevoir des retours directs d'un **Agent Humain**
- exigences pour être **en ligne** en permanence
- exigences pour comprendre le protocole de **Notification de Communication Scholaire** et les **Politiques**

À cet égard :: Application
:: L'application est un Agent autonome sans interface utilisateur qui n'a pas besoin d'un agent humain pour exécuter des opérations d'écriture sur le Data Pod. Il s'agit d'une application de confiance pour le Maintainer <s>qui pourrait en principe mettre à jour tout artefact sur le Data Pod</s>. Cette application pourrait fonctionner en arrière-plan sur l'ordinateur du mainteneur et rester connectée tant que l'ordinateur est connecté à un réseau.
: Tableau de bord
:: Le tableau de bord est un Agent qui répond aux retours d'information d'un agent humain. Habituellement, ce tableau de bord s'exécute dans un navigateur en mode en ligne ou hors ligne lorsque le navigateur est ouvert sur l'ordinateur du mainteneur avec l'application du tableau de bord ouverte dans un des onglets du navigateur.
: Orchestrateur
:: L'orchestrateur est un Agent autonome qui peut lire la **boîte de réception** (scholaire) du **Data Pod** et ajouter au **Journal d'événements du cycle de vie de l'artefact**. Guidé par des politiques exprimées sous forme de règles d'entreprise, l'**Orchestrateur** communique également avec le réseau de la communauté universitaire en utilisant le **protocole de notification de communication scolaire** implémentant des **Politiques**.

<img src="images/mellon-orchestrator-solar.svg" width="40%">

Les trois Agents peuvent être vus comme un mini système solaire avec le **Data Pod** comme le Soleil. L'**Application** est un agent entièrement digne de confiance qui s'exécute très près du data pod (en termes de confiance). L'**Orchestrateur** a des droits d'accès très limités au data pod. La tâche principale de l'orchestrateur est de mettre à jour le journal des événements et d'exécuter des politiques afin de communiquer via le protocole de notification de communication scolaire (lire/envoyer des messages vers/depuis les centres de services corrects).
Le **Tableau de bord** se situe entre les deux, il a le contrôle sur le **Data Pod** mais nécessite peut-être (toujours) une intervention de l'utilisateur pour mettre à jour le pod. La communication entre l'**Application/Tableau de bord** et l'**Orchestrateur** se fait via la boîte de réception du Data Pod.Les réseaux ci-dessous illustrent les privilèges CRUD envisagés pour les différents acteurs de ce document. Le premier réseau représente une configuration typique de Solid dans laquelle le tableau de bord est une application monopage ayant un accès direct au Data Pod, et l'application est davantage un processus en arrière-plan s'exécutant sur le même ordinateur que le Maintainer.

<div><img src="images/mellon-crud-app.svg" width="80%"></div>
<i>Opérations CRUD dans le cas où le tableau de bord est une application monopage et l'application un processus en arrière-plan</i>

Question : Les Règles et la Boîte de réception font-elles partie nécessairement du Data Pod, ou peuvent-elles exister en tant que ressources distinctes ?

Le deuxième réseau illustre une configuration plus classique avec un tableau de bord de navigateur contrôlé par une application serveur qui utilise un Data Pod comme stockage backend.

<div><img src="images/mellon-crud.svg" width="80%"></div>
<i>Opérations CRUD dans le cas où le tableau de bord et l'application sont une application client/serveur classique</i>

# Communication entre le Data Pod et le réseau de la communauté savante

Les notifications A2 peuvent être envoyées de l'environnement du chercheur vers les environnements **Service Hub**.
Par exemple, en cas de demande de révision d'un artefact se trouvant dans le **Data Pod**, une notification appropriée peut être envoyée à un **Service Hub** de révision. Le **Service Hub** peut répondre, par exemple, en acceptant ou en refusant la demande de révision et, dans ce dernier cas, transmettre le résultat de la révision.

Le **Orchestrator** envoie des notifications en réponse à des déclencheurs résultant de l'exécution de Politiques - mises en œuvre en tant que règles métier - associées au **Data Pod**. Le **Orchestrator** reçoit des notifications en réponse à celles qu'il a envoyées. Le **Orchestrator** enregistre les informations contenues dans les notifications sortantes et entrantes dans le **Journal des événements du cycle de vie de l'artefact**.Les notifications AS2 sont considérées comme une approche de haut niveau pour coordonner automatiquement l'exécution distribuée des fonctions cruciales de la communication savante. Les notifications garantissent simplement que les fonctions respectives sont exécutées conformément aux politiques, mais n'essaient pas d'automatiser l'accomplissement réel de la fonction elle-même. Par exemple, lorsqu'une "Offre" est envoyée à un service de révision, nous n'envisageons pas que le message contienne toutes les étapes pour automatiser entièrement le processus de soumission. Il pourrait contenir suffisamment de métadonnées pour des flux de travaux simples. En général, une communication hors bande pourrait être nécessaire pour effectuer toutes les étapes requises.

Toutes les notifications AS2 sont envoyées à tous les **Acteurs** du réseau sous la forme de [Notifications de Données Liées](https://www.w3.org/TR/ldn/).

Dans ce document d'utilisation, nous utilisons 5 types de notifications AS2 conformes au projet [COAR Notify](https://notify.coar-repositories.org/patterns/):

: **Offre**
	::La notification "Offre" est utilisée lorsqu'un système offre l'une de ses ressources à un autre système pour effectuer une activité.

: **Annuler**
	::La notification "Annuler" est utilisée pour annuler une offre faite dans une notification précédente.

: **Accepter**
	::La notification "Accepter" est une réponse à une "Offre" faite dans une notification précédente. Elle indique que l'offre est acceptée.

: **Rejeter**
	::La notification "Rejeter" est une réponse à une "Offre" faite dans une notification précédente. Elle indique que l'offre est rejetée.

: **Annonce**
	::La notification "Annonce" est utilisée pour annoncer le résultat d'une activité : typiquement pour annoncer la disponibilité d'un nouvel artefact (scientifique).

# Le Data Pod envoie des notifications à un Concentrateur de Services

Examinons deux exemples de la façon dont les notifications AS2 peuvent être envoyées en dehors de l'environnement des chercheurs et générer certains schémas de communication à partir de ces exemples.

## Le mainteneur annonce un artefact (terminé) dans le Data Pod

<img src="images/mellon-scenario-1.svg" width="80%">- Le **Responsable** décide, après beaucoup de travail, qu'un artefact sur le **Data Pod** est prêt à entrer dans le domaine scolaire
- Le **Responsable** utilise le **Tableau de bord** pour envoyer une notification `Annonce` à la **Boîte de réception** (scolaire) du **Data Pod**
- L'**Orchestrator** interroge la **Boîte de réception** (scolaire) du **Data Pod** et découvre l'`Annonce` du **Responsable**
    - Nous supposons que l'**Orchestrator** a la capacité de filtrer toutes les notifications fiables de la **Boîte de réception** (validation, signatures, correspondance de forme, etc.)
- L'**Orchestrator** met à jour le **Journal des événements du cycle de vie**
- L'**Orchestrator** a une liste de **Politiques** sur ce qu'il faut faire lorsqu'une nouvelle `Annonce` d'un type spécifique arrive et envoie une ou plusieurs notifications AS2 à un ou plusieurs **Hubs de service** en conséquence

Problème : Tout ceci suppose que le service ServiceHub ne renvoie pas un code 4** (pour toute raison, métadonnées, privilèges, etc.)

Problème : Nous devons déterminer ce qui est nécessaire pour qu'un Orchestrator puisse comprendre dans quelle phase du cycle de vie d'un artefact il se trouve. Nous aurons également besoin d'une sorte de typologie pour un type d'artefact lui-même, par exemple, article, ensemble de données, logiciel, etc.

## Le Responsable offre un artefact dans le Data Pod à un Hub de service

<img src="images/mellon-scenario-2.svg" width="80%">

- Le **Responsable** décide d'envoyer un artefact à un **Service de certification** pour demander un examen

Problème : Herbert : Cela serait généralement déclenché par une notification envoyée par l'Orchestrator à la Boîte de réception à la suite de l'exécution de la politique "une fois qu'un artefact est entré dans le domaine scolaire, il doit être certifié". Le Responsable peut alors décider s'il souhaite demander un examen et où. Je pense qu'il serait bon d'ajouter cela à l'image car cela se connecte bien aux cas précédents + illustre la politique- Le **Maintainer** prépare dans le **Dashboard** les métadonnées requises et envoie une notification `Offer` à la **Boîte de réception** (Scholarly) du **Data Pod**
- L'**Orchestrator** interroge la **Boîte de réception** (Scholarly) du **Data Pod** et découvre l'offre du **Maintainer**
- L'**Orchestrator** met à jour le **Journal des événements du cycle de vie**
- L'**Orchestrator** envoie l'offre au **Service de certification**
    - Avec `@id` l'emplacement réseau du journal des événements `https://bob.pod.org/events/cb7b1aed`

## Politiques Possibles

Des politiques possibles qui peuvent être disponibles pour ces cas d'utilisation (en utilisant un langage de politique pseudo).

<div class="example">
The pseudo policy language used there tries to match new Notifications to a Shape , constructing
this shape with new properties, under specific conditions
```
<SHAPE>
  <PROPERTIES>
  when
    <CONDITIONS>
```

</div>

</div>

Ajouter uniquement les notifications `Annonce` et `Accepter` du **Responsable** au **Journal des événements**

<div class="example">
```
mellon:AppendScholarlyRecord
  a RessourceÉvénement
  a RessourceAjout
  quand
    a Notification
        isFrom(Responsable)
        inSet(Annonce,Accepter)
        isOfType(Article,Revue,Jeu de données)

```
</div>

Transférer chaque `Annonce` du **Responsable** au **Service d'enregistrement** institutionnel
et au **Service d'archivage**

<div class="example">
```
mellon:TransférerAuCatalogue
  a Notification
  rdfs:label "Enregistrer dans mon catalogue de bibliothèque"
  cible:
    id: http://mon.institution.org
    ldp:inbox: http://mon.institution.org/inbox
    type: Système
  quand
    a Notification
        isFrom(Responsable)
        inSet(Annonce)

mellon:TransférerAuxArchives
  a Notification
  rdfs:label "Ajouter à nos archives"
  cible:
    id: http://dataforever.edu
    ldp:inbox: http://dataforever.edu/submission/new/inbox
    type: Système
  quand
    a Notification
        isFrom(Responsable)
        inSet(Annonce)
```
</div>

Transférer une notification d'un **Responsable** avec une `cc` (par exemple une Offre) à des *Services Hubs* externes.

<div class="example">
```
mellon:TransférerCC
  a Notification
  rdfs:label "Transférer les messages avec une cc"
  cible:
    id: @cc
  quand
    a Notification
        isFrom(Responsable)
        has(cc)
        notEqual(cc,Responsable)```
</div>

## Effets secondaires de l'orchestrateur

Basé sur les **Politiques** :

- <s>L'**Orchestrateur** interroge la **Boîte de réception** pour de nouvelles notifications</s>
- L'**Orchestrateur** met en correspondance chaque nouvelle notification avec les **Politiques**
    - Cela donnera lieu à aucune ou plusieurs formes de politique correspondantes
    - Lorsque la forme correspond à un `mellon:EventLogRecord`, un nouveau journal d'événements est créé
    - Lorsque la forme correspond à un `mellon:ForwardMessage`, une nouvelle notification AS2 est envoyée.


# Le centre de services envoie des notifications au Data Pod

## Le centre de services annonce une nouvelle ressource concernant un artefact dans le Data Pod

### L'annonce du centre de services est une réponse à une offre précédente

Par exemple, un **Responsable** demande qu'une revue de presse soit réalisée sur l'une des publications
qui se trouve sur le **Data Pod**. À une étape antérieure, une `Offre` a été envoyée à
la revue en tant que **Service de certification**. En réponse à l'`offre`, la revue envoie
une `Annonce` à la **Boîte de réception** (scientifique) du **Data Pod**.

<img src="images/mellon-scenario-3.svg" width="80%">

- L'**Orchestrateur** trouve dans la **Boîte de réception** (scientifique) du **Data Pod** une notification `Annonce`
- L'`Annonce` contient une propriété `inReplyTo` faisant référence à une `Offre` précédente
- L'**Orchestrateur** valide l'`Offre` par rapport au **Journal d'événements**
- L'**Orchestrateur** met à jour le **Journal des événements du cycle de vie** avec la notification AS2

Problème : S'agit-il d'une copie littérale de la notification AS2 ou d'une version traitée ?

### L'annonce du centre de services est autonome

Par exemple, une revue en superposition ajoute un article trouvée dans un **Data Pod**, via l'identifiant WebID
de l'auteur, la revue envoie une notification `Annonce` à la **Boîte de réception**
(scientifique) du **Data Pod**.

<img src="images/mellon-scenario-4.svg" width="80%">
- L'**Orchestrator** trouve dans la boîte de réception (académique) du **Data Pod** une notification de type `Annonce`
- L'`Annonce` ne comporte pas de propriété `inReplyTo` faisant référence à une `Offre` antérieure
- L'**Orchestrator** ignore la notification mais ne la supprime pas de la **Boîte de réception** car elle concerne l'URI d'un artefact académique dans le **Data Pod**
- Le **Maintainer** repère via le **Dashboard** l'`Annonce` autonome dans la boîte de réception (académique)
- Le **Maintainer** envoie un `Accepter` avec un `inReplyTo` à l'`Annonce` dans la boîte de réception (académique)
- L'**Orchestrator** trouve à la fois l'ancienne notification de type `Annonce` et la nouvelle notification de type `Accepter`
- L'**Orchestrator** dispose d'une **Politique** selon laquelle lorsque les deux notifications correspondent, elles peuvent être enregistrées dans le **Journal des événements du cycle de vie**

## Politiques Possibles

# Remerciements

Nous remercions Herbert Van de Sompel, [DANS + Université de Gand](https://dans.knaw.nl/nl/), hvdsomp@gmail.com
pour sa précieuse contribution à ce projet.