<pre class='metadata'>
Title: Scholarly use cases
Shortname: orchestrator
Level: 2
Status: DREAM
Editor: Patrick Hochstenbach
Markup Shorthands: markdown yes
Abstract: TODO
</pre>

# Alice creates a scholary artefact

<img src="images/spec-usecases_scholarly_1.svg"/>

- Alice logins into her dashboard
- She creates a new artefact stub
    - Adds some metadata:
        - Title
        - Author(s)
            - as WebIds
        - Subjects
            - ontology based
        - Abstract
        - Status
            - Private
            - Public
        - Status ..set of   
            - [ ] Registered
            - [ ] Certified
            - [ ] Archived
- The artefact will result in a new landing page on the pod
    - With all the descriptive metadata
    - With technical metadata
        - Creation date
        - Last update date
        - Files
            - Number of files
            - Sizes
            - Names
            - Types
    - It will trigger an `as:Create` about the artefact

- Alice can upload one or more files for this artefact
    - It will trigger an `as:Update` about the artefact

- Alice can delete one or more files in this artefact
    - It will trigger an `as:Update` about the artefact

- Alice can edit the metadata for this artefact
    - It will trigger an `up:Update` about the artefact

- Alice can delete the artefact
    - It will trigger an `as:Delete` about the artefact

- Alice can say the artefact is ready for view
    - It will trigger an `as:Announce` about the artefact
    - It will trigger an update of the Alice's event log by her
      orchestrator 
      
# Bob want to know about Alices artefacts

<img src="images/spec-usecases_scholarly_2.svg"/>

- Bob's orchestrator receives Announces from Alice's Event log
- Bob's orchestrator sends an notification to Bob's inbox

# Alice can send a notification to a ServiceHub

<img src="images/spec-usecases_scholarly_3.svg"/>

- Alice use her Alice Dashboard to select an artefact 
- Alice's Dashboard can send an notification to a Service Hub
    - Alice can in the dashboard select a Service Hub from a list
        - The dashboard reads this list of Service Hub from a FOAF-registry
    - Alice's dashboard will send the `as:Offer` to Alice's orchestrator
- Alice's Orchestrator will append to the Event Log of the Alice's pod
- Alice's Orchestrator will forward the notification to the Service Hub

# Alice can see an overview of all notifications and events of her pod

# Registration hub accepts Offers from Alice

<img src="images/spec-usecases_scholarly_5_b.svg"/>

- Registration hub is e.g. an institutional repository

- Alice selects an artefact for registration and prepares an `as:Offer` for the 
  registration hub (institutional repository). 
- Her dashboard sends this `as:Offer` to the Alice orchestrator
- Alice's orchestrator:
    - Forwards the `as:Offer` to the institutional repository
    - Appends the `as:Offer` to Alice's Event Log of Alice's pod    
- A process in the institutional repository has it own internal processing to:
    - Poll the inbox of the institutional repository and find an `as:Offer` from Alice
    - Automatic accepts this offer and send an `as:Accept` to Alice's Pod 
    - Append the `as:Accept` to the Repository Event Log
    - Automatic a registration of Alice's artefact into the institutional repository
- Registration manager manually updates Alice deposited artefact in the institutional repository
- Registration manager sends an `as:Announce` back to Alice with the result of the registration process
- A process in the institutional repository append the `as:Announce` to the Repository Event Log
- Alice's orchestrator will update Alice's Event Log with the `as:Accept` notification
- Alice's Orchestrator will update Alice's Event Log with the `as:Announce` notification

# Archival hub accepts services

<img src="images/spec-usecases_scholarly_6.svg"/>

- Alice selects an artefact for archivation and send it to the Archival Hub as `as:Offer`
      (not in the diagram: see section 3 for an example workflow)
- Archival Hub orchestrator accepts `as:Offer` from Alice for archivation of data
    - Poll the inbox of the Archival Hub pod and finds an `as:Offer` from Alice
    - Automatic accepts this offer and sends an `as:Accept` to Alice's Pod 
- Alice's orchestrator will update Alice's Event Log with the `as:Accept` notification
- Archival Hub orchestrator will start the archivation process:
    - Send the Alice artefact to Robust Links
    - Poll Robust Links to check if data is archived
- The Archival Hub orchestrator
    - Send a `as:Announce` notifiction to Alice
    - Appends to the Registrator Event Log of the Archival Hub pod
- Alice's Orchestrator will update the Event Log on Alice Pod based 
 on this trigger

# Orchestrator suggests Services

- Based on status of the metadata
- Based on univesity policies

E.g.

- *Library* request to Offer New registered artefacts to 
    be registered at the institutional repository
    - Can be automated
- *Faculty* request to Offer New registerd artefacts to 
    a faculty registry
    - Can be automated
- *University* request to Offer New registered artefacts to
    a Data Management Plan service
        E.g. https://dmponline.be
    - Requires manual intervention by Alice
- *Conference* request to Offer an artefact about a topic
    - Requires manual intervation by Alice
- *Discovery Hub* request to Offer new artefacts to be included
    in the index    
    - Can be automated