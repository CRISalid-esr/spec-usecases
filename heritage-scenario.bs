<pre class='metadata'>
Title: Demo scenario ErfgoedPod
Shortname: demo
Level: 1
Status: DREAM 
URL: https://github.com/ErfgoedPod/spec-usecases
Editor: Miel Vander Sande, [meemoo](https://meemoo.be), miel.vandersande@meemoo.be
Abstract: A short description of your spec, one or two sentences.
Markup Shorthands: markdown yes
</pre>

Introduction {#intro}
=====================

This document describes the scenario for the first ErfgoedPod demo. 
The goal is to illustrate the components and architecture of the decentralized artefact exchange network 
in combination with the
the collection registration system [Solid CRS](https://www.youtube.com/watch?v=XJgl8EcQqf8), developed by Digita for the "Solid for small heritage institutions" project.

Scenario {#scenario}
=====================

## Pre-conditions

### Maintainers

<dfn>Bob</dfn>: collection maintainer at a cultural heritage institution

- [=Bob=] has a WebID
- [=Bob=] has the data pod URI of his institution
- [=Bob=] has an inbox URI

### Solid Pods

<dfn>Institution's Pod</dfn>: data pod containing all digital heritage files of [=Bob=]'s institution
 - contains an inbox

### Orchestrators

<dfn>Institution's Orchestrator</dfn>: takes care of the communication (sending notifications) on behalf of [=Bob=].
 - it has an personal inbox as API
 - it knows the location of [=Institution's Pod=] and its inbox


### Solid Apps

<dfn>Solid CRS</dfn>: collection management system for small digital heritage organizations
 - hosted at https://solid-crs.netwerkdigitaalerfgoed.nl/
 - manages the artefacts (collections of digital heritage objects) in the [=Institution's Pod=]

<dfn>Demo Dashboard</dfn>: demo frontend to illustrate communication between different pods and services
 - create, send and receive notifications
 - illustrate network of actors
 - introspect event logs
 - demo hosted at http://bellow2.ugent.be/public/

### Service hubs

<dfn>Registry Service Hub</dfn>
- wrapper service for the NDE [Dataset Registry](https://datasetregister.netwerkdigitaalerfgoed.nl/apidoc.php)

<dfn>Archival Service Hub</dfn>
- wrapper service for the meemoo UGent GREB archive


## Part 1: artefact creation 

<img width="900px" src="images/heritage/bob-creates-heritage-artefact.svg"/>

1. [=Bob=] logs into [=Solid CRS=] with his Web ID
    - [=Bob=] chooses the [=Institution's Pod=]
2. [=Bob=] creates a new Collection about the liberation of Utrecht in WOII
3. He adds an object with the following metadata
    - image: https://data.spinque.com/iiif/2/https%3A%2F%2Fimages.memorix.nl%2Fniod%2Fthumb%2F1000x1000%2F9236648b-6507-e27b-f3fa-68a5227efc18.jpg/full/full/0/default.jpg
    - license: unknown
    - object number: 74541
    - type: [Bevrijding Utrecht](https://data.niod.nl/WO2_Thesaurus/events/9314)
    - title: "Bevrijding Utrecht."
    - description: "Bevrijding Utrecht. Overweg Burgemeester Reigerstraat."
    - collection: "Nieuwe collectie"
    - Location: [Utrecht](http://www.wikidata.org/entity/Q39297398)
    - Date: 1945-05-07
4. This results in a new artefact of type `schema:CreativeWork` in the [=Institution's Pod=]: 

```
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix schema: <http://schema.org/> .

<https://pod.inrupt.com/mvs/heritage-objects/data-bbc0118e-7ba8-47ab-a532-fae62e2281fb#object-214e970e-48f2-48a1-a90f-add11f31a64a>
        schema:height      <https://pod.inrupt.com/mvs/heritage-objects/data-bbc0118e-7ba8-47ab-a532-fae62e2281fb#object-214e970e-48f2-48a1-a90f-add11f31a64a-height> ;
        schema:isPartOf    <https://pod.inrupt.com/mvs/heritage-collections/catalog#collection-d241c975-42fa-41ab-9ff9-3918ee22085a> ;
        schema:weight      <https://pod.inrupt.com/mvs/heritage-objects/data-bbc0118e-7ba8-47ab-a532-fae62e2281fb#object-214e970e-48f2-48a1-a90f-add11f31a64a-weight> ;
        schema:locationCreated  <http://www.wikidata.org/entity/Q39297398> ;
        schema:dateCreated  "1945-05-07" ;
        schema:name        "Bevrijding Utrecht."@nl ;
        schema:description  "Bevrijding Utrecht. Overweg Burgemeester Reigerstraat."@nl ;
        rdf:type                        schema:CreativeWork ;
        schema:mainEntityOfPage  <https://pod.inrupt.com/mvs/heritage-objects/data-bbc0118e-7ba8-47ab-a532-fae62e2281fb#object-214e970e-48f2-48a1-a90f-add11f31a64a-digital> ;
        schema:additionalType  <https://data.niod.nl/WO2_Thesaurus/events/9314> ;
        schema:depth       <https://pod.inrupt.com/mvs/heritage-objects/data-bbc0118e-7ba8-47ab-a532-fae62e2281fb#object-214e970e-48f2-48a1-a90f-add11f31a64a-depth> ;
        schema:identifier  "1" ;
        schema:width       <https://pod.inrupt.com/mvs/heritage-objects/data-bbc0118e-7ba8-47ab-a532-fae62e2281fb#object-214e970e-48f2-48a1-a90f-add11f31a64a-width> .
```

5. The new artefact triggers an `as:Create` activity about the artefact. 
6. A [[ldn|Linked Data Notification]] containing the activity is posted to [=Institution's Pod=]'s inbox.

## Part 2: requesting services

<img width="900px" src="images/heritage/bob-requests-service.svg"/>

### Invoking the registration service

1. [=Bob=] turns to the [=demo dashboard=] of the artefact exchange network
2. [=Bob=] logs into the [=Institution's Pod=] for the first time
    - a event log resource is added to the pod
3. [=Bob=] can view the artefact + inbox and event log
5. [=Institution's Orchestrator=] receives the `as:Create` activity
    - appends the creation event to the event log
    - suggests to [=Bob=] that he should offer the artefact metadata to the [=Registry Service Hub=].
4. [=Bob=] sends a new notification with an `as:Offer` activity to the [=Registry Service Hub=]
    - Select the [=Registry Service Hub=] as target from the list
    - Add a short note
5. The [=Registry Service Hub=] receives the notification
    - posts the metadata to the Dataset Registry API https://datasetregister.netwerkdigitaalerfgoed.nl/viaurl.php
6. The [=Registry Service Hub=] sends a notification with `as:Announce` to [=Bob=]
7. [=Institution's Orchestrator=] appends the event log
8. [=Bob=] sees in the event log with the [=demo dashboard=] that the registration is complete


### Invoking the archival service

1. [=Bob=] turns to the [=demo dashboard=] of the artefact exchange network
5. [=Institution's Orchestrator=] suggests to Bob that he should offer the image artefact with metadata to the [=Archival Service Hub=].
4. [=Bob=] sends a new notification with an `as:Offer` activity to the [=Archival Service Hub=]
    - Select the [=Archival Service Hub=] as target from the list
    - Add a short note
5. The [=Archival Service Hub=] receives the notification
    - downloads the artefact
    - wraps the image artefact in a bagit and adds it to meemoo's SFTP
6. The [=Archival Service Hub=] polls meemoo's Mediahaven API for `ARCHIVED_ON_DISK` premis event
    - when found, it sends a notification with `as:Announce` to [=Bob=]
7. [=Institution's Orchestrator=] appends the event log
8. [=Bob=] sees in the event log with the [=demo dashboard=] that the registration is complete

Issue(1): how to get to aggregation of artefacts
